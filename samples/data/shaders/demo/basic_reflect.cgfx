
string description = "Basic Reflection";

float g_krefl
<
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.01;
    string UIName =  "Reflection";
> = 0.6f;

float4x4 WorldInvTransp : WorldInverseTranspose;
float4x4 WorldViewProj : WorldViewProjection;
float4x4 World : World;
float4x4 ViewInv : ViewInverse;

texture g_texture : DIFFUSE
<
	string ResourceName = "texture.tga";
	string ResourceType = "2D";
>;

texture g_anglemap : ENVIRONMENT
<
    string ResourceName = "anglemap.tga";
    string ResourceType = "2D";
>;

sampler2D g_colorsampler = sampler_state
{
	Texture = <g_texture>;
  	MinFilter = LinearMipmapLinear;
  	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};

sampler2D g_anglesampler = sampler_state
{
    Texture = <g_anglemap>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};

struct appdata {
    float4 Position    : POSITION;
    float4 UV        : TEXCOORD0;
    float3 Normal    : NORMAL;
};

struct vertexOutput {
    float4 HPosition    : POSITION;
    float4 TexCoord        : TEXCOORD0;
    float3 WorldNormal    : TEXCOORD1;
    float3 WorldView    : TEXCOORD2;
};

float4 anglemap(float3 d)
{
	const float one_over_pi = 1.0 / 3.14159267;
	float invl = rsqrt(d.x*d.x+d.y*d.y);
	float r = one_over_pi * acos(d.z) * invl;
	float2 uv = (float2(d.x*r,d.y*r) + 1.0) * 0.5;
	return tex2D(g_anglesampler, uv);
}

float fresnel_approx(float NdotV, float bias, float power)
{
    return saturate(bias + (1.0-bias)*pow(1.0 - max(NdotV, 0), power));
}

vertexOutput reflect_VS(appdata IN)
{
    vertexOutput OUT;
    float3 normal = normalize(IN.Normal);
    OUT.WorldNormal = mul( WorldInvTransp, float4(normal, 0.0)) ;
	float3 Pw = mul(World, IN.Position).xyz;
    OUT.TexCoord = IN.UV;
    float3 Ew = float3(ViewInv[0].w, ViewInv[1].w, ViewInv[2].w);
    OUT.WorldView = Ew  - Pw;
    OUT.HPosition = mul(WorldViewProj, IN.Position);
    return OUT;
}

float4 reflect_PS(vertexOutput IN) : COLOR
{
    half3 Nn = normalize(IN.WorldNormal);
    float3 Vn = normalize(IN.WorldView);
    half3 R = reflect(-Vn, Nn);
	half4 reflColor = g_krefl * anglemap(R);
	half4 diffuse = tex2D(g_colorsampler, IN.TexCoord.xy);
    half f = fresnel_approx(dot(Nn, Vn), 0.2, 1.0);
    return lerp(diffuse, reflColor, f);
}

technique reflective
{
    pass p0
    {
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = true;
		CullFace = back;
		DepthFunc = LEqual;
        VertexProgram = compile arbvp1 reflect_VS();
        FragmentProgram = compile arbfp1 reflect_PS();
    }
}


