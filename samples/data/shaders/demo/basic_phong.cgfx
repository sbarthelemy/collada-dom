/* --- DO NOT REMOVE THIS LINE --- SNIP_SDK_COPYRIGHT_C_BEGIN */
/* --- DO NOT REMOVE THIS LINE --- SNIP_SDK_COPYRIGHT_C_END */
string description = "Basic Phong";


float g_kd
<
    string UIName = "Diffuse Scale";
    string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.1;
> = 1.0;

float g_ks
<
    string UIName = "Specular Scale";
    string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 20.0;
    float UIStep = 0.01;
> = 5.0;

float g_specpower
<
    string UIName = "Specular Power";
    string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 400.0;
    float UIStep = 20.0;
> = 100.0f;

float3 g_lightpos : LightPosition
<
    string Object = "PointLight";
    string Space = "World";
> = {100.0f, 100.0f, -100.0f };


float3 g_ambcolor
<
	string UIName = "Ambient Color";
    string UIWidget = "Color";
> = { 0.32, 0.32, 0.03 };

float3 g_diffcolor
<
	string UIName = "Diffuse Color";
    string UIWidget = "Color";
> = { 0.015, 0.364, 1.0 };

float3 g_speccolor
<
	string UIName = "Specular Color";
    string UIWidget = "Color";
> = { 0.264, 0.372, 0.372 };


float g_time : TIME;
float4x4 g_WorldIT : WorldInverseTranspose;
float4x4 g_WorldViewProj : WorldViewProjection;
float4x4 g_World : World;
float4x4 g_ViewInv : ViewInverse;

texture texture : DIFFUSE
<
	string ResourceName = "texture.tga";
	string ResourceType = "2D";
>;

sampler2D g_colorsampler = sampler_state
{
	Texture = <texture>;
  	MagFilter = Linear;
  	MinFilter = LinearMipmapLinear;
	WrapS = Repeat;
	WrapT = Repeat;
};

struct outVertexData {
    varying float4 HPosition	: POSITION;
    varying float2 UV			: TEXCOORD0;
	varying float3 lightvec		: TEXCOORD1;
	varying float3 worldeyevec	: TEXCOORD2;
	varying float3 worldnormal  : TEXCOORD3;
};

outVertexData basic_phong_VS (
	varying in float3 Position	: POSITION,
	varying in float4 Normal	: NORMAL0,
    varying in float2 UV		: TEXCOORD0,
	uniform in float3 lightpos,
	uniform in float4x4 world,
	uniform in float4x4 viewinv,
	uniform in float4x4 worldviewproj,
	uniform in sampler2D colorsampler
	)
{
	outVertexData OUT;

	float4 Po = float4(Position, 1.0);
    float3 Nw = float3(mul((float3x3)world, Normal.xyz));
	float3 Pw = mul(world, Po).xyz;
	float3 Iw  = float3(viewinv[0].w, viewinv[1].w, viewinv[2].w);

	OUT.HPosition = mul(worldviewproj, Po);
	OUT.UV.xy = UV.xy;
    OUT.lightvec = lightpos - Pw;
    OUT.worldeyevec = (Iw - Pw);
    OUT.worldnormal = Nw.xyz;

	return OUT;
}

float3 basic_phong_PS(outVertexData IN,
	uniform in float3 ambcolor,
	uniform in float3 diffcolor,
	uniform in float kd,
	uniform in float3 speccolor,
	uniform in float ks,
	uniform in float specpower,
	uniform in sampler2D colorsampler
) : COLOR
{
    float3 L = normalize(IN.lightvec);
    float3 V = normalize(IN.worldeyevec);
    float3 N = normalize(IN.worldnormal);
    float3 H = normalize(L + V);
    float3 light = lit( dot(L,N), dot(H,N), specpower);
    float3 spec = light.zzz;
    float3 diff = light.yyy;
    float4 tex = tex2D(colorsampler,IN.UV.xy);
	return tex * (kd * diff + ambcolor) + speccolor * (ks * spec) ;
}

technique blue_plastic {
	pass pass_0 {
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = false;
		VertexProgram = compile arbvp1 basic_phong_VS(
			g_lightpos,
			g_World,
			g_ViewInv,
			g_WorldViewProj,
			g_colorsampler
		);
		FragmentProgram = compile arbfp1 basic_phong_PS(
			g_ambcolor,
			g_diffcolor,
			g_kd,
			g_speccolor,
			g_ks,
			g_specpower,
			g_colorsampler
		);
	}
}

