
string description = "Hypnotic Polka Dots";

float2 g_speed
<
    string UIName = "Anim Speed";
    float UIMin = 0.1;
    float UIMax = 10;
    float UIStep = .1;
> = { 0.2f, 0.3f };

float2 g_scale
<
    string UIName = "Anim Scale";
    float UIMin = 0.1;
    float UIMax = 10;
    float UIStep = .1;
> = { 0.2f, 0.3f };

float g_texscale
<
    string UIName = "Texture Scale";
	string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 1.0;
> = { 1.0f };

float g_specpower
<
    string UIName = "Specular Power";
    string UIWidget = "Slider";
    float UIMin = 1;
    float UIMax = 300;
	float UIStep = 1;
> = { 100.0f };

float g_ks
<
    string UIName = "Specular Scale";
    string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 20.0;
    float UIStep = 0.01;
> = 2.5f;

float4 g_lightpos : LightPosition
<
    string Object = "PointLight";
    string Space = "World";
> = {100.0f, 100.0f, -100.0f, 0.0f};

float3 g_dotcolor : DIFFUSE
<
	string UIName = "Dot Color";
    string UIWidget = "Color";
> = { 1.0f, 0.899f, 0.153f };

float3 g_bgcolor : DIFFUSE
<
	string UIName = "Background Color";
    string UIWidget = "Color";
> = { 1.0f, 0.390f, 0.570f };


float g_time : TIME;
float4x4 g_WorldIT : WorldInverseTranspose;
float4x4 g_WorldViewProj : WorldViewProjection;
float4x4 g_World : World;
float4x4 g_ViewInv : ViewInverse;

texture dots : DIFFUSE
<
	string ResourceName = "polkadots.tga";
	string ResourceType = "2D";
>;

sampler2D g_colorsampler = sampler_state
{
	Texture = <dots>;
  	MagFilter = Linear;
  	MinFilter = LinearMipmapLinear;
	WrapS = Repeat;
	WrapT = Repeat;
};

struct outVertexData {
    varying float4 HPosition	: POSITION;
    varying float2 UV			: TEXCOORD0;
	varying float3 lightvec		: TEXCOORD1;
	varying float3 worldeyevec	: TEXCOORD2;
	varying float3 worldnormal  : TEXCOORD3;
};

outVertexData polkadotVS (
	varying in float3 Position	: POSITION,
	varying in float4 Normal	: NORMAL0,
    varying in float2 UV		: TEXCOORD0,
	uniform in float2 speed,
	uniform in float2 scale,
	uniform in float time,
	uniform in float3 lightpos,
	uniform in float4x4 world,
	uniform in float4x4 viewinv,
	uniform in float4x4 worldviewproj
	)
{
	const float2 TwoPI2 = { 6.28318530f, 6.28318530f };

	outVertexData OUT;

	float2 offset = frac(time*speed) * TwoPI2;
	float4 Po = float4(Position,1.0);
	float3 Nw = normalize(float3(mul((float3x3)world, Normal.xyz)));
    float3 Pw = mul(world, Po).xyz;
	float3 Iw  = float3(viewinv[0].w, viewinv[1].w, viewinv[2].w);

	OUT.HPosition = mul(worldviewproj, Po);
	OUT.UV.xy = (g_texscale*UV.xy) + sin(offset) * scale;
    OUT.lightvec = lightpos - Pw;
    OUT.worldeyevec = (Iw - Pw);
	OUT.worldnormal = Nw; 
	
	return OUT;
	
}

float4 polkadotPS(outVertexData IN,
	uniform in sampler2D colorsampler,
	uniform in float3 dotcolor,
	uniform in float3 bgcolor,
	uniform in float specpower,
	uniform in float ks
) : COLOR
{
	const float4 ambient = { 0.1f, 0.1f, 0.1f, 0.0f };
	float4 map = tex2D(colorsampler,IN.UV);
    float3 L = normalize(IN.lightvec);
    float3 V = normalize(IN.worldeyevec);
    float3 N = normalize(IN.worldnormal);
    float3 H = normalize(L + V);
    float4 light = lit( dot(L,N), dot(H,N), specpower);
    float4 spec = light.zzzz;
    float4 diff = light.yyyy;
	float4 color = float4( lerp(bgcolor, dotcolor, map.x), 1.0f);
	//return color * ( diff  + ambient) + (ks * spec * map.x);
	return ( diff * color + ambient) + (ks * spec * color);
	

}

technique hypnotic_dots {
	pass pass_0 {
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = true;
		CullFace = back;
		DepthFunc = LEqual;
		VertexProgram = compile arbvp1 polkadotVS(
			g_speed,
			g_scale,
			g_time,
			g_lightpos,
			g_World,
			g_ViewInv,
			g_WorldViewProj
		);
		FragmentProgram = compile arbfp1 polkadotPS(
			g_colorsampler,
			g_dotcolor,
			g_bgcolor,
			g_specpower,
			g_ks
		);
	}
}

