/*********************************************************************NVMH3****
Path:  NVSDK\Common\media\cgfx1.4
File:  check3d.cgfx

Copyright NVIDIA Corporation 2002
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


Comments:
    $Id: //sw/devrel/SDK/MEDIA/CgFX1.4/check3d.cgfx#14 $

******************************************************************************/

float4x4 WorldITXf : WorldInverseTranspose;
float4x4 WorldViewProjXf : WorldViewProjection;
float4x4 WorldXf : World;
float4x4 ViewInvXf : ViewInverse;

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

float4 LightPos : LightPosition
<
    string Object = "PointLight";
    string Space = "World";
> = {100.0f, 100.0f, -100.0f, 0.0f};

float3 LightColor : Diffuse
<
    string UIName =  "Light Color";
    string UIWidget = "Color";
> = {1.0f, 1.0f, 1.0f};

float3 AmbiColor : Ambient
<
    string UIName =  "Ambient Light Color";
    string UIWidget = "Color";
> = {0.17f, 0.17f, 0.17f};

float3 SurfColor1 : Diffuse
<
    string UIName =  "Surface Color";
    string UIWidget = "Color";
> = {1.0f, 0.4f, 0.0f};

float3 SurfColor2 : Diffuse
<
    string UIName =  "Surface Color";
    string UIWidget = "Color";
> = {0.0f, 0.2f, 1.0f};

float Ks
<
    string UIName = "Specular";
    string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.01;
> = 0.5;

float SpecExpon : SpecularPower
<
    string UIName =  "Specular power";
    string UIWidget = "Slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
> = 25.0;

float SWidth
<
    string UIName = "Filter width";
    string UIWidget = "Slider";
    float UIMin = 0.001;
    float UIMax = 10.0;
    float UIStep = 0.001;
> = 1.0;

float Scale
<
    string UIName = "Size of Checks";
    string Units = "Inches";
    string UIWidget = "Slider";
    float UIMin = 0.0;
    float UIMax = 5.0;
    float UIStep = 0.01;
> = 0.5;

float Balance
<
    string UIName = "Clip";
    string UIWidget = "Slider";
    float UIMin = 0.01;
    float UIMax = 0.99;
    float UIStep = 0.01;
> = 0.5;

////////////////////////////////////////////////////
/// structures /////////////////////////////////////
////////////////////////////////////////////////////

struct appdata 
{
    float3 Position    : POSITION;
    float4 UV        : TEXCOORD0;
    float4 Normal    : NORMAL;
    float4 Tangent    : TANGENT0;
    float4 Binormal    : BINORMAL0;
};

struct vertexOutput 
{
    float4 HPosition    : POSITION;
    float4 TexCoord    : TEXCOORD0;
    float3 LightVec    : TEXCOORD1;
    float3 WorldNormal    : TEXCOORD2;
    float3 WorldEyeVec    : TEXCOORD3;
    float3 WorldTangent    : TEXCOORD4;
    float3 WorldBinorm    : TEXCOORD5;
    float4 ObjPos    : TEXCOORD6;
};

//////////////////////////////////////////////////////////
// shader code ///////////////////////////////////////////
//////////////////////////////////////////////////////////

vertexOutput mainVS(appdata IN) 
{
    vertexOutput OUT;
	//float3 Nw = float3(mul((float3x3)world, Normal.xyz));
    OUT.WorldNormal = mul((float3x3)WorldITXf, IN.Normal.xyz).xyz;
    OUT.WorldTangent = mul((float3x3)WorldITXf, IN.Tangent.xyz).xyz;
    OUT.WorldBinorm = mul((float3x3)WorldITXf, IN.Binormal.xyz).xyz;
    float4 Po = float4(IN.Position.x,IN.Position.y,IN.Position.z,1.0);
    float3 Pw = mul(WorldXf, Po).xyz;
    OUT.LightVec = LightPos - Pw;
    OUT.TexCoord = IN.UV;
	float3 Ew  = float3(ViewInvXf[0].w, ViewInvXf[1].w, ViewInvXf[2].w);
    OUT.WorldEyeVec = normalize(Ew  - Pw);
    float4 hpos = mul(WorldViewProjXf, Po);
    OUT.ObjPos = Po;
    OUT.HPosition = hpos;
    return OUT;
}

//////////////////////////////////////////////////////////
/// boxfiltered-stripe function
//////////////////////////////////////////////////////////

float numeric_box_filter_stripe(float Bal,float Val,float Op,float Scale)
{
    float width = abs(ddx(Val)) + abs(ddy(Val));
    float w = width*Op;
    float x0 = Val/Scale - (w/2.0);
    float x1 = x0 + w;
    float i0 = (1.0-Bal)*floor(x0) + max(0.0, frac(x0)-Bal);
    float i1 = (1.0-Bal)*floor(x1) + max(0.0, frac(x1)-Bal);
    float stripe = (i1 - i0)/w;
    stripe = min(1.0,max(0.0,stripe)); 
    return stripe;
}

// PS with box-filtered step function
float4 checkerPS(vertexOutput IN) : COLOR {    
                                            
    float3 Ln = normalize(IN.LightVec);
    float3 Nn = normalize(IN.WorldNormal);
    float op = SWidth/Scale;
                                                      
    // x stripes
    float check = numeric_box_filter_stripe(Balance,IN.ObjPos.x,op,Scale);
    // y stripes
    float s = numeric_box_filter_stripe(Balance,IN.ObjPos.y,op,Scale);
    check = abs(check - min(1.0,max(0.0,s)));
    // z stripes
    s = numeric_box_filter_stripe(Balance,IN.ObjPos.z,op,Scale);
    check = abs(check - min(1.0,max(0.0,s)));

    float3 dColor = lerp(SurfColor1,SurfColor2,check);
    float3 Vn = normalize(IN.WorldEyeVec);
    float3 Hn = normalize(Vn + Ln);
    float4 lighting = lit(dot(Ln,Nn),dot(Hn,Nn),SpecExpon);
    float hdn = lighting.z; // Specular coefficient
    float ldn = lighting.y; // Diffuse coefficient
    float3 diffContrib = dColor * (ldn*LightColor + AmbiColor);
    float3 specContrib = hdn * LightColor;
    float3 result = diffContrib + (Ks * specContrib);
    return float4(result.xyz,1.0f);
}

///////////////////////////////////////////////////////
// TECHNIQUES /////////////////////////////////////////
///////////////////////////////////////////////////////

technique Numeric
{
    pass p0
    {
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = true;
		CullFace = back;
		DepthFunc = LEqual;
        VertexProgram = compile vp30 mainVS();
        FragmentProgram = compile fp30 checkerPS();
    }
}

///////////////////////////////////////////////////////
////////////////////////////////////////////// eof ////
///////////////////////////////////////////////////////
